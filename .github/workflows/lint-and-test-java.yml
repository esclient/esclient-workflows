name: "lint and test java"

on:
  workflow_call:
    inputs:
      java-version:
        type: string
        required: false
        default: "21"
      java-distribution:
        type: string
        required: false
        default: "temurin"
    secrets:
      SONAR_TOKEN:
        required: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y make
          
          GRPC_JAVA_VERSION="1.68.1"
          wget -O protoc-gen-grpc-java "https://repo1.maven.org/maven2/io/grpc/protoc-gen-grpc-java/${GRPC_JAVA_VERSION}/protoc-gen-grpc-java-${GRPC_JAVA_VERSION}-linux-x86_64.exe"
          chmod +x protoc-gen-grpc-java
          sudo mv protoc-gen-grpc-java /usr/local/bin/

      - name: Ensure Maven Wrapper exists and is executable
        run: |
          if [ ! -f "./mvnw" ] || [ ! -f "./.mvn/wrapper/maven-wrapper.properties" ]; then
            echo "Maven wrapper missing, generating..."
            mvn wrapper:wrapper
          fi
          chmod +x ./mvnw
          echo "MAVEN_CMD=./mvnw" >> $GITHUB_ENV

      - name: Install dependencies
        run: ${{ env.MAVEN_CMD }} dependency:resolve

      - name: Run static analysis (excluding generated files)
        run: |
          ${{ env.MAVEN_CMD }} spotless:check -Pquality
          ${{ env.MAVEN_CMD }} checkstyle:check -Pquality
          ${{ env.MAVEN_CMD }} spotbugs:check -Pquality
          ${{ env.MAVEN_CMD }} modernizer:modernizer -Pquality

  test-and-sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better SonarQube analysis

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y make protobuf-compiler

      - name: Ensure Maven Wrapper exists and is executable
        run: |
          if [ ! -f "./mvnw" ] || [ ! -f "./.mvn/wrapper/maven-wrapper.properties" ]; then
            echo "Maven wrapper missing, generating..."
            mvn wrapper:wrapper
          fi
          chmod +x ./mvnw
          echo "MAVEN_CMD=./mvnw" >> $GITHUB_ENV

      - name: Install dependencies
        run: ${{ env.MAVEN_CMD }} dependency:resolve

      - name: Run tests and generate coverage
        run: ${{ env.MAVEN_CMD }} clean verify jacoco:report -Pquality

      - name: Verify coverage files exist
        run: |
          echo "Checking for coverage files..."
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "✓ Coverage report found"
            echo "Coverage file size: $(wc -l < target/site/jacoco/jacoco.xml) lines"
            echo "First 30 lines of coverage report:"
            head -30 target/site/jacoco/jacoco.xml
          else
            echo "✗ Coverage report NOT found"
            exit 1
          fi
          
          if [ -d "target/classes" ]; then
            echo "✓ Compiled classes found"
            echo "Class files:"
            find target/classes -name "*.class" | head -20
          else
            echo "✗ Compiled classes NOT found"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ${{ env.MAVEN_CMD }} sonar:sonar \
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=./target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco/jacoco.xml \
            -Dsonar.exclusions=**/RatingServiceGrpc*.java,**/Rating.java,**/RatingOrBuilder.java,**/*OuterClass.java,**/generated/**,**/target/generated-sources/** \
            -Dsonar.coverage.exclusions=**/RatingServiceGrpc*.java,**/Rating.java,**/RatingOrBuilder.java,**/*OuterClass.java,**/generated/**,**/target/generated-sources/** \
            -Dsonar.cpd.exclusions=**/RatingServiceGrpc*.java,**/Rating.java,**/RatingOrBuilder.java,**/*OuterClass.java,**/generated/**,**/target/generated-sources/** \
            -Dsonar.test.inclusions=**/*Test.java,**/*Tests.java \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test/java

      - name: Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}